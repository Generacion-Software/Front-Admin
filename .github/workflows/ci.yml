name: CI/CD Pipeline
# Pipeline completo de CI/CD con testing, coverage y deployment

on:
  push:
    branches: [main, dev, KevinU]
  pull_request:
    branches: [main, dev, KevinU]
# Triggers en push y PR para las ramas especificadas

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test & Quality Checks

    # Matrix strategy para probar en múltiples versiones de Node.js
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # Clona el repositorio en el runner

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
        # Configura Node.js con cache de npm para mejor performance

      - name: Install dependencies
        run: npm ci
        # Usa npm ci para instalación más rápida y determinística

      - name: Lint code
        run: npx next lint --max-warnings=0
        # Ejecuta el linter y falla si hay advertencias o errores

      - name: Check code formatting
        run: npx prettier --check .
        # Verifica que el código cumpla con el formato Prettier

      - name: Run unit tests
        run: npm run test:ci
        # Ejecuta tests con coverage para CI
        env:
          CI: true

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        # Sube coverage solo para Node.js 20.x para evitar duplicados

      - name: Build application
        run: npm run build
        # Compila el proyecto para verificar que no hay errores de build

      - name: Audit dependencies
        run: npm audit --audit-level=high
        # Falla si hay vulnerabilidades de nivel alto o crítico
        continue-on-error: true
        # Permite que continúe aunque haya vulnerabilidades (para no bloquear desarrollo)

  deploy-preview:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy Preview
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
        # Deploy de preview para PRs

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
        # Deploy de producción solo para main

  notify:
    needs: [test, deploy-production]
    runs-on: ubuntu-latest
    name: Notify Deployment
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Deployment to production successful!"
          else
            echo "❌ Deployment to production failed!"
          fi
        # Notificación del estado del deployment